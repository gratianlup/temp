{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"flame-graph-panel.html","title":"Flame Graph view","text":"<ul> <li>focus on node (double click)</li> <li>change root node</li> <li>sync selected function + source file</li> <li>back button (mention mouse back button)</li> <li>search</li> <li>context menu (open, instances, marking, copy node details)</li> <li>details panel summary (with link to Additional functionality page)</li> </ul> Flame graphs <p>A flame graph is an alternative, more compact way of viewing a call tree. In this view, function instances are nodes with a size proportional to the time spent relative to the parent (caller) function and makes it easier to identify the portions of the app that take most of the time.  </p> <p>Nodes are sorted in the horizontal direction based on decreasing time relative to their parent node, while the ordering in the vertical direction forms a stack trace (a path in the call tree).</p> <p>The following links provide an introduction to the flame graph visualization concept, its history, and how it's being used across the industry for performance investigations.  </p> <ul> <li>CPU Flame Graphs (brendangregg.com)</li> <li>Visualizing Performance - The Developers\u2019 Guide to Flame Graphs (youtube.com)</li> </ul>"},{"location":"flame-graph-panel.html#toolbar-buttons","title":"Toolbar buttons","text":""},{"location":"intro.html","title":"Introduction","text":"<ul> <li>What's the app</li> <li>Advantages, how it ocmpares to others</li> <li>Features</li> <li>Download location (github release)</li> <li>Auto-update</li> </ul> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"profiling-ui.html","title":"Profiling UI overview","text":""},{"location":"profiling-ui.html#trace-views","title":"Trace views","text":"<p>Once a trace is loaded, the Summary, Flame Graph, and Timeline views provide a high-level overview of the profiled application's slowest parts. These views allow you to identify the functions where most time is spent and when they execute.</p> <p></p> <ul> <li>Summary view: displays all the functions with profiling data, which are sorted by default based on their exclusive (self) duration. The left side of the panel lists the modules (binaries) with profiling data, sorted based on the total time used by the functions part of the module.</li> <li>Flame Graph view: displays an interacitve flame graph view of the call tree. The right side of the panel shows detailed information about the selected node(s).</li> <li>Timeline view: displays the thread activity during the entire duration of the trace and allows filtering of the displayed profiling data to specific threads and time ranges.</li> <li>Call Tree view: displays nested call tree view showing the function call sequence for the entire trace.</li> <li>Caller/Callee view: displays for the function selected in the Summary view the list of callers (functions calling the selected one) and callees (functions called by the selected one).</li> </ul>"},{"location":"profiling-ui.html#single-function-views","title":"Single function views","text":"<p>Open a function to display the Assembly, Source file, and Flow graph views and see which parts take the most time (a double-click or the Return key in any of the views opens the function's Assembly view).</p> <p></p> <ul> <li>Assembly view: displays the function's assembly code, where each instruction is annotated with the corresponding source line number and inlining information. The right side shows the time percentage (relative to the function's time) and time taken by each instruction. The slowest instructions are marked with colors and flame icons. Clicking on an instruction selects its corresponding source line in the Source File view.</li> <li>Source File view: displays the function's source file and, optionally, the assembly code generated for each line. The right side shows the time percentage (relative to the function's time) and time taken by each line. The slowest lines are marked with colors and flame icons. Clicking on a line selects the corresponding instructions in the Assembly view.</li> <li>Flow Graph view: displays the function's control-flow graph, constructed by analyzing the assembly code and forming basic blocks (a sequence of instructions that starts with jump targets and ends with jumps or branch instructions). The slowest blocks are marked with colors and labeled with the time percentage (relative to the function's time). Blocks forming a loop are marked with a green arrow.</li> </ul>"},{"location":"trace-loading.html","title":"Loading a trace","text":""},{"location":"trace-loading.html#loading-a-new-trace","title":"Loading a new trace","text":"<p>There are several ways to open a new ETW trace file (*.etl):</p> <ul> <li>Use the Open button in the Start Page displayed on startup.</li> <li>Use the Profiling -&gt; Load Profile menu.</li> <li>Use the Ctrl+O keyboard shortcut.</li> </ul> <p>Once the trace file is selected in the Open File dialog, the Load profile trace window is displayed. It lists the processes (applications) that are captured in the trace, sorted by weight (number of samples).</p> <p></p> <p>From the list, select the process you want to analyze and press the Load Profile button (alternatively, use double-click or the Return key). The selected process is loaded from the trace file, any required binary and symbol files are downloaded and the profiling data is analyzed. Once loading is completed, the window closes and the profiling views are populated, as described in Profiling UI overview.</p>"},{"location":"trace-loading.html#loading-a-previosly-opened-trace","title":"Loading a previosly opened trace","text":"<p>Previously opened traces are saved as sessions. Recent sessions can be quickly opened again for the same process using either the Start page or the session list on the left of the Load profile trace window (use double-click or the Return key).</p> <p></p>"},{"location":"trace-loading.html#symbols-configuration","title":"Symbols configuration","text":"<p>Symbols are the binary (EXE/DLL) and debug information (PDB) files required to analyze the processes recorded in a trace. The binaries are used to disassembly individual functions and the debug files are used to resolve function names and provide the source file and line number information.</p> <p></p>"},{"location":"trace-loading.html#symbol-paths","title":"Symbol paths","text":"<p>Symbols are searched in the locations indicated by the Symbol Paths list, found in the Symbols tab of the Load profile trace window. Symbol locations can be of two types:  </p> <ul> <li>Paths to local directories or network file shares.  </li> <li>Symbol server URLs. By default the Microsoft public symbol server is added to the list, with a local download cache directory at C:\\Symbols.</li> </ul> <p>More information about symbol servers and the symbol path syntax is available here: https://learn.microsoft.com/en-us/windows/win32/debug/using-symsrv</p>"},{"location":"trace-loading.html#additional-symbol-options","title":"Additional symbol options","text":"Option Description Include __NT__SYMBOL__PATH environment variable Append the environment variable's value to the list of searched symbol paths. Include subdirectories for local paths Consider symbols in sub-directories up to 3 levels deep for the local directories in the Symbols Paths list. Don't load symbols for very low sample modules Skip downloading and loading of symbols for modules with a low number of samples. This helps reduce download time for processes with many modules, where the majority have few relevant samples. A module is skipped if it has fewer samples than a threshold. This threshold can be configured using the Minimum samples field as a percentage of the total number of samples. Don't load symbols that failed in previous sessions Skip downloading and loading of symbols that could not be found in previous sessions (for example, due to offline symbol servers). The list of skipped symbols can be viewed and cleared. Cache processed symbol files Cache the processed debug symbol files and use them to speed up loading of traces requiring the same symbols. The cache files are saved in the temporary directory and can be viewed and cleared."},{"location":"trace-loading.html#trace-processing-options","title":"Trace processing options","text":"Option Description Handle Kernel profile samples Include samples executing in the kernel context and connect the call stacks between kernel and user mode code. Handle CPU performance counter samples Process CPU performance counter (PMC) events and display them in the Summary, Assembly and Source File views using additional columns. Download source files from Source Server Automatically attempt to download source files from the location indicated by the debug info file. If the download URL requires authentication, it can be configured in the Authentication section found below."},{"location":"trace-loading.html#authentication","title":"Authentication","text":"<p>Authentication using an user/email address and Personal Autehnticaion token (PAT) can be configured for both source file servers and symbol servers.</p>"},{"location":"trace-loading.html#binary-files","title":"Binary files","text":"<p>Additional local directory paths for searching binary files can be configured. The binary files to process in a trace can be restricted to only the ones in the accepted list.</p>"}]}