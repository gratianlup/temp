{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"assembly-view.html","title":"Assembly view","text":""},{"location":"assembly-view.html#overview","title":"Overview","text":"<ul> <li>disassembly with syntax highlighting for x64 and arm64 arch</li> <li>basic blocks, collapse, time annotation</li> <li>jump targets</li> <li>line numbers, inlinees</li> <li>selection, time in status bar</li> <li>tooltip over tab name</li> <li>click on instr selects line in source panel, block in flow graph</li> </ul> <p>MULTIPLE SELECTION IN FLAME GRAPH, SOURCE FILE and other lists also shows time in status bar!</p> <ul> <li>sync with source line</li> <li> <p>sync with flow graph</p> </li> <li> <p>profiling marking and columns, extra for perf counters</p> </li> <li> <p>jump to hottest instr by default</p> </li> <li> <p>toolbar</p> </li> <li>mouse, keyboard shortcuts</li> <li>profiling toolbar</li> <li>jump to hottest</li> <li>elements</li> <li>blocks</li> <li>inlinees</li> <li>instances</li> <li> <p>threads</p> </li> <li> <p>back button, history, back/next mouse buttons</p> </li> <li>call target arrow markings</li> <li>call target double-click</li> </ul> <p>TODO later: - options panel</p>"},{"location":"call-tree-panel.html","title":"Call Tree view","text":"<ul> <li>expand hottest path</li> <li>right-click context menu</li> <li>mouse, keyboard shortcuts</li> <li>hover shows preview like in flame graph (details panel)</li> </ul>"},{"location":"caller-panel.html","title":"Caller/Callee view","text":"<ul> <li>docs similar to call tree</li> <li>caller and callee lists<ul> <li>explain expanding caller tree going up the call tree, callees going down</li> </ul> </li> <li>instance combining toggle</li> <li>right-click context menu</li> <li>mouse, keyboard shortcuts</li> <li>hover shows preview like in flame graph (details panel)</li> </ul>"},{"location":"flame-graph-panel.html","title":"Flame Graph view","text":"Introduction to flame graphs <p>A flame graph is an alternative, more compact way of viewing a call tree. In this view, function instances are nodes with a size proportional to the time spent relative to the caller (parent) function and makes it easier to identify the portions of the app that take most of the time.  </p> <p>Nodes are sorted in the horizontal direction based on decreasing time relative to their parent node, while the ordering in the vertical direction forms a stack trace (a path in the call tree). The function taking the most time in the application is then found in the leftmost, bottom part of the Flame graph.</p> <p> In the example above, the main function is considered the process entry point, calling foo and bar, with foo taking 60% of the time and bar 40%. Function foo spends a part of its total (inclusive) time in the calls to baz and etc1, while the rest is self (exclusive) time, meaning instructions part of foo which are not calls to other functions.  </p> <p>Note that there are two instances of the function baz with different execution time, each with a unique path to it in the call tree starting from main (all other functions have a single instance). You can see the time of each instance by hovering with the mouse over it or in the Details panel after it's selected.</p> <p>The following links provide an introduction to the flame graph visualization concept, its history, and how it's being used across the industry for performance investigations.  </p> <ul> <li>CPU Flame Graphs (brendangregg.com)</li> <li>Visualizing Performance - The Developers\u2019 Guide to Flame Graphs (youtube.com)</li> </ul>"},{"location":"flame-graph-panel.html#overview","title":"Overview","text":"<p>The Flame graph view is the main means of identifying the parts of the application where most time is spent. The view has three parts:</p> <ul> <li>a toolbar at the top, with action buttons and the Search input box.</li> <li>the interactive flame graph itself.</li> <li>the Details panel on the right side. The panel displays detailed info about the selected node(s), and its visibility can be toggled using the Details button in the toolbar.</li> </ul> <p></p>"},{"location":"flame-graph-panel.html#flame-graph-nodes","title":"Flame graph nodes","text":"<p>The flame graph displays nodes representing functions stacked top to bottom according to the call tree paths forming the stack traces. Each node is a unique instance of a function \u2014 a function having multiple instances means there are several paths in the call tree that call the function. \u00a0</p> <p>Each node has the function name, optionally prepended with the module name, followed by the execution time percentage relative to the entire trace and the execution time. \u00a0</p> <p>By default, the nodes are color-coded based on the module names to which the functions belong. Nodes for functions executing in the kernel/managed context are marked with a different text and border color (blue by default). The displayed text fields and colors can be customized in the Flame graph options. \u00a0</p> <p>Note</p> <p>When the called function nodes are too small to be visible in the view, they are collapsed under a placeholder node rendered with a hatch pattern. Placeholder nodes are expanded into individual nodes when zooming in the view. \u00a0</p>"},{"location":"flame-graph-panel.html#navigating-the-flame-graph","title":"Navigating the Flame graph","text":"<p>A double-click on a node enlarges it to cover the entire view and may expand the collapsed nodes. For example, the called nodes become visible after double-clicking the node hovered in the screenshot above. </p> <p>The node enlarging can be repeated to go deeper down the call path. The Back button in the toolbar (or Backspace key/Back mouse button) undoes the operation and returns the view to its previous state. \u00a0</p> <p></p> <p>Note</p> <p>In the screenshot above, the nodes starting with ntoskrnl.exe!KiPageFault use a different style to mark code executing in kernel mode. The user mode and kernel mode call stacks are automatically combined.</p>"},{"location":"flame-graph-panel.html#changing-the-root-node","title":"Changing the root node","text":"<p>It can be useful to view only a subregion of the Flame graph. By changing the root node, only nodes for functions starting with the new root are displayed and execution time percentages are computed relative to the new root starting at 100%.</p> <p>To change the root node, from the right-click context menu, select Set Function as Root (alternatively, use the Alt+Double-click shortcut). After the switch, the toolbar displays the name of the current root node. Setting a new root node can be repeated in the new view.</p> <p>To remove the root node and view the entire Flame graph, click the X button next to its name in the toolbar. If multiple nested root nodes were set, removing the current node activates the previous one.</p> <p></p>"},{"location":"flame-graph-panel.html#flame-graph-view-interaction","title":"Flame graph view interaction","text":"Toolbar Button Description Undoes the previous action, such as enlarging a node or changing the root node. Resets the view to it's original state, displaying the entire Flame graph. Zooms out the view around the center point. Zooms in the view around the center point. If enabled, selecting a node also selects the associated function in the other profiling views. If enabled, selecting a node also displays the associated function in the Source file view, with the source lines annotated with profiling data. If enabled, display the module name before the function name in the nodes as module!function. If enabled, display the Details panel on the right side of the Flame graph view. Search box Search for nodes with a specific function name using a case-insensitive substring search. Press the Escape key to reset the search or the X button next to the input box. Mouse shortcuts Action Description Hover Hovering over a node briefly displays a preview popup with the complete function name and total/self execution times. Clicking the Pin button or dragging the popup expands it into a panel equivalent to the Details panel. Multiple such panels can be kept open at the same time. Click Selects the pointed node and deselects any previously selected nodes. The Details panel is updated and, if Sync is enabled in the toolbar, the function is selected in the other panels. Displays the associated function in the Source file view if Source is enabled in the tooolbar.. Clicking an empty part of the view deselects all nodes. Ctrl+Click Selects the pointed node and keeps the previously selected nodes (append). The Details panel is updated to display a combined view of all selected nodes. Shift+Click When a node is selected, it expands the selection to include all nodes in the call stack between the pointed node and the selected one. The Details panel is updated to display a combined view of all selected nodes. Double-click Enlarges (zooms-in) the pointed node to cover the view's width, adjusting child node widths accordingly. Ctrl+Double-click Opens the Assembly view of the selected function in the current tab. Ctrl+Shift+Double-click Opens the Assembly view of the selected function in a new tab. Alt+Double-click Sets the selected node as the root node of the Flame graph. Back If the mouse has an optional Back button, this undoes the previous action, such as enlarging a node (double-click) or changing the root node. An alternative is pressing the Backspace key or the Back button in the toolbar. Right-click Shows the context menu for the selected nodes. Click+Drag If the flame graph is larger than the view, clicking on and dragging an empty part of the view moves the view in the direction of the mouse. Scroll wheel Scrolls the view vertically if the flame graph is larger than the view Shift+Scroll wheel Scrolls the view horizontally if the flame graph is larger than the view Ctrl+Scroll wheel Zooms in or out the view around the mouse pointer position. Click+Scroll wheel Zooms in or out the view around the mouse pointer position. Keyboard shortcuts Keys Description Return Enlarges (zooms-in) the pointed node to cover the view's width, adjusting child node widths accordingly. Ctrl+Return Opens the Assembly view of the selected function in the current tab. Ctrl+Shift+Return Opens the Assembly view of the selected function in a new tab. Alt+Return Opens a preview popup with the assembly of the selected function. Press the Escape key to close the popup.Multiple preview popups can be can be kept open at the same time. Alt+Shift+Return Opens a preview popup with the assembly of the selected function, with profile data filtered to include only the selected instance. Ctrl+C Copies to clipboard a HTML and Markdown table with a summary of the selected nodes. Ctrl+Shift+C Copies to clipboard the function names of the selected nodes. Ctrl+Alt+C Copies to clipboard the mangled/decorated function names of the selected nodes. Backspace Undoes the previous action, such as enlarging a node (double-click) or changing the root node. Ctrl+= Zooms in the view around the center point. Ctrl+- Zooms out the view around the center point. Ctrl+0 Ctrl+R Resets the view to the initial state. Arrow keys Scrolls the view in the horizontal and vertical directions if the flame graph is larger than the view. Right-click context menu"},{"location":"flame-graph-panel.html#details-panel","title":"Details panel","text":"<p>The Details panel shows extended information about the selected node(s) in the Flame graph. It provides a quick overview of the slowest functions and modules being called directly or through other functions starting with the selection. \u00a0</p> <p>The top shows the Total (inclusive) execution time and Self (exclusive) execution time values for the selected node (function instance). The right side shows the index of the chosen instance, among all instances, with the slowest instance having the lowest index. Use the left/right arrow buttons to switch to the previous/next function instance. \u00a0</p> <p>The information displayed in the tabs below is for the selected function instance only; the Info tab displays statistics for all instances.</p> <p>All function nodes in the lists have a right-click context menu with options to open the Assembly view, preview popup, and select the function in the other views. Double-click/Ctrl+Return opens the Assembly view for the selected function. Combine these shortcuts with the Shift key to open the Assembly view in a new tab instead.</p> InfoStackFunctionsModulesCategoriesInstances <p> </p> <p>The Info tab displays statistics about all function instance nodes.  </p> Section Description Instances Displays total execution time (sum), average, and median across all function instances, as a total/self execution time percentage relative to the entire trace and execution time value. Histogram The histogram displays the time distribution across all function instances. Instances with similar times are grouped, and the number of instances in each group is shown above, with more details when hovering over a group with the mouse.Clicking on a group selects the first node from the group in the Flame graph view. The Total/Self radio buttons switch between using the total time or self time for the histogram.In the above example, there are 3 instances of function genString, one with an execution time of ~1.5ms and two, binned together, with ~1sec each. The time of the selected instance is marked with a green arrow, and the average/median times are indicated by red/blue dotted lines. Threads Displays the list of threads on which all function instances execute, with each thread's total/self execution time percentage and execution time value.Right-clicking a thread shows a context menu with options to open the Assembly view with profile data filtered to include only the selected thread and multiple options for changing the thread filtering for the entire trace.Double-clicking a thread filters the entire trace to show only code executing on that thread. Module Displays the name of the module to which the function belongs. Shortcut buttons on the right side: Marks all function nodes belonging to the module with a color. Copies to clipboard the module name. Function Displays the complete function name, followed by the execution context as U/K/M standing for User/Kernel/Managed mode. Shortcut buttons on the right side: Opens a preview popup with the function's assembly. Opens the function's Assembly view in a new tab. Marks all function nodes with a color. Copies to clipboard the function name. <p> </p> <p>The Stack tab displays the call stack (stack trace) leading to the selected function instance node.</p> <p> </p> <p>The Functions tab lists the slowest functions being called directly or through other functions, starting with the selected function instance node. By default, the list is sorted by self (exclusive) time in descending order. The Flame graph options can change the sorting to consider total (inclusive) time instead.</p> <p> </p> <p>The Modules tab is similar to the Functions tab, with the difference that functions are first grouped by the module they belong to, and the execution time per module is also displayed. Selecting a module shows the list of the slowest functions.</p> <p> </p> <p>The Categories tab is similar to the Functions tab, with the difference that functions are first grouped by the category they belong to, and the execution time per category is also displayed. Selecting a category shows the list of the slowest functions.Right-click on a category shows options to export a report as a HTML/Markdown file and copy the report to clipboard.</p> <p> </p> <p>The Instances tab lists all instances of the function, sorted by total (inclusive) execution time.</p>"},{"location":"flame-graph-panel.html#more-documentation-in-progress","title":"More documentation in progress","text":"<ul> <li>Context menu</li> <li>Marking nodes</li> <li>Searching</li> <li>Options:<ul> <li>General</li> <li>Appearance</li> <li>Details panel</li> </ul> </li> </ul>"},{"location":"flow-graph-panel.html","title":"Flow Graph view","text":"<ul> <li>basic blocks coded by color</li> <li>edges color coding, red for exit block, green loop</li> <li>click on node selects block in assembly view, on ASM selects block</li> <li>profiling info annotates hot blocks (label below) and color</li> <li>mouse and keyboard shorcuts for zoom, pan</li> </ul>"},{"location":"intro.html","title":"Introduction","text":"<ul> <li>What's the app</li> <li>Advantages, how it ocmpares to others</li> <li>Features</li> <li>Download location (github release)</li> <li>Auto-update</li> </ul> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"profiling-ui.html","title":"Profiling UI overview","text":""},{"location":"profiling-ui.html#trace-views","title":"Trace views","text":"<p>Once a trace is loaded, the Summary, Flame Graph, and Timeline views provide a high-level overview of the profiled application's slowest parts. These views allow you to identify the functions where most time is spent and when they execute.</p> <p></p> <ul> <li>Summary view: displays all the functions with profiling data, which are sorted by default based on their exclusive (self) duration. The left side of the panel lists the modules (binaries) with profiling data, sorted based on the total time used by the functions part of the module.</li> <li>Flame Graph view: displays an interacitve flame graph view of the call tree. The right side of the panel shows detailed information about the selected node(s).</li> <li>Timeline view: displays the thread activity during the entire duration of the trace and allows filtering of the displayed profiling data to specific threads and time ranges.</li> <li>Call Tree view: displays nested call tree view showing the function call sequence for the entire trace.</li> <li>Caller/Callee view: displays for the function selected in the Summary view the list of callers (functions calling the selected one) and callees (functions called by the selected one).</li> </ul>"},{"location":"profiling-ui.html#single-function-views","title":"Single function views","text":"<p>Open a function to display the Assembly, Source file, and Flow graph views and see which parts take the most time (a double-click or the Return key in any of the views opens the function's Assembly view).</p> <p></p> <ul> <li>Assembly view: displays the function's assembly code, where each instruction is annotated with the corresponding source line number and inlining information. The right side shows the time percentage (relative to the function's time) and time taken by each instruction. The slowest instructions are marked with colors and flame icons. Clicking on an instruction selects its corresponding source line in the Source File view.</li> <li>Source File view: displays the function's source file and, optionally, the assembly code generated for each line. The right side shows the time percentage (relative to the function's time) and time taken by each line. The slowest lines are marked with colors and flame icons. Clicking on a line selects the corresponding instructions in the Assembly view.</li> <li>Flow Graph view: displays the function's control-flow graph, constructed by analyzing the assembly code and forming basic blocks (a sequence of instructions that starts with jump targets and ends with jumps or branch instructions). The slowest blocks are marked with colors and labeled with the time percentage (relative to the function's time). Blocks forming a loop are marked with a green arrow.</li> </ul>"},{"location":"source-panel.html","title":"Source File view","text":"<ul> <li>source file loading</li> <li>combined asm toggle, expand sections</li> <li>selection, time in status bar</li> <li> <p>click on line selects instrs in assembly view</p> </li> <li> <p>profiling marking and columns, extra for perf counters</p> </li> <li> <p>jump to hottest instr by default</p> </li> <li> <p>call target arrow markings</p> </li> <li>if/else/loop/switch recognition</li> <li>marking in left doc and columns</li> <li> <p>outline menu</p> </li> <li> <p>toolbar</p> </li> <li>mouse, keyboard shortcuts</li> <li>profiling toolbar</li> <li>jump to hottest</li> <li>lines</li> <li>blocks</li> <li>inlinees</li> <li>instances</li> <li>threads</li> </ul> <p>TODO later:   - inlinees   - options panel</p>"},{"location":"summary-panel.html","title":"Summary view","text":""},{"location":"summary-panel.html#overview","title":"Overview","text":"<p>The summary view displays all modules (binaries) and functions that have profile data in the trace, and makes it easy to identify the functions where most time spent. The view has three parts:  </p> <ul> <li>a toolbar at the top, with action buttons and the Search input box.</li> <li>the Modules panel on the left side. Its visibility can be toggled using the Modules button in the toolbar.</li> <li>The list of functions from either the entire trace or filtered to display only the functions part of a single module. By default the list is sorted by self (exclusive) time in descending order.</li> </ul> <p></p>"},{"location":"summary-panel.html#modules-list","title":"Modules list","text":"<p>The modules list has an entry for each module with profile data and starts with an All entry representing all modules combined. Each entry has the module name, execution time percentage relative to the entire trace and execution time value. Modules are sorted by their execution time in descending order.</p> <p>By default the All entry is active and the function list displays all functions with profile data in the trace.  </p> <p>Double-click a module (or use the Return key) to display only its functions. Selecting a module while the All entry is active selects its functions in the list.</p>"},{"location":"summary-panel.html#functions-list","title":"Functions list","text":"<p>The function list has an entry for each function with profile data. Each entry has the demangled (undecorated) function name, module and self (exclusive) execution time and total (inclusive) execution time. If CPU performance counters are found and loaded from the trace, the additional columns with metrics and the counters are appended after the last column.  </p> <p>The list is filtered based on the active module. The displayed columns and style can be customized in the Summary options.</p> <p>The function list is by default sorted by the self (exlusive) execution time in decreasing order. Click the same column header to toggle between decreasing and  increasing order. Click on a column to sort the list based on its values.  </p> <p>Note</p> <p>The same sorting actions apply to other list views in the application. Not all list views support sorting currently.  </p> <p>The columns in all list views can be resized and reorder.   The new layout is saved across sessions when closing the application.</p> <p>If marking of functions based on their name or module is active, the function entries use the marking background color.</p>"},{"location":"summary-panel.html#summary-view-interaction","title":"Summary view interaction","text":"Toolbar Button Description If enabled, selecting a function also selects it in the other profiling views. If enabled, selecting a function also displays the source in the Source file view, with the source lines annotated with profiling data. Export Export the current function list into one of multiple formats (Excel, HTML and Markdown) or copy to clipboard the function list as  a HTML/Markdown table. Search box Search for functions with a specific name using a case-insensitive substring search. Searching filters the list down to display only the matching entries. Press the Escape key to reset the search or the X button next to the input box. Mouse shortcuts Action Description Hover Hovering over a function displays a popup with the stack trace (call path) end with the slowest function's instance. Pin or drag the popup to keep it open. Click Selectes the function in the other views if Sync is enabled in the toolbar and displays the source in the Source file view if Source is enabled in the toolbar. Double-click Opens the Assembly view of the selected function in the current tab. Shift+Double-click Opens the Assembly view of the selected function in a new tab. Right-click Shows the context menu for the selected functions. Keyboard shortcuts Keys Description Return Opens the Assembly view of the selected function in the current tab. Shift+Return Opens the Assembly view of the selected function in a new tab. Ctrl+Shift+Left Opens the Assembly view of the selected function in a new tab docked to the left of the active tab. Ctrl+Shift+Right Opens the Assembly view of the selected function in a new tab docked to the right of the active tab. Alt+Return Opens a preview popup with the assembly of the selected function. Press the Escape key to close the popup.Multiple preview popups can be can be kept open at the same time. Ctrl+C Copies to clipboard a HTML and Markdown table with a summary of the selected functions. Ctrl+Shift+C Copies to clipboard the function names of the selected functions. Ctrl+Alt+C Copies to clipboard the mangled/decorated function names of the selected functions. Right-click context menu"},{"location":"summary-panel.html#exporting-the-function-list","title":"Exporting the function list","text":"<p>The current function list can be exported and saved into multiple formats, with the slowest functions marked using a similar style as in the application:</p> <ul> <li>Excel worksheet (*.xlsx)</li> <li>HTML table (*.html)</li> <li>Markdown table (*.md)</li> </ul>"},{"location":"summary-panel.html#more-documentation-in-progress","title":"More documentation in progress","text":"<ul> <li>Context menu</li> <li>Marking functions</li> <li>Options</li> </ul> <p>??? TODO - fix left/right shortcuts context menu</p>"},{"location":"timeline-panel.html","title":"Timeline view","text":"<ul> <li>display all and each thread</li> <li>threads have ID and optional name, color code by name</li> <li>selection with sync selects functions executing in time range and thread (all threads when done on all)</li> <li>selection in other panels marks samples </li> <li>right-click on selection context menu to filter by thread and time range. Also with double-click</li> <li>left of threads context menu to filter to, include, exclude, etc</li> <li>filterng also update top-level menu, shows active filter</li> <li>hover shows stack trace of hottest sample at point</li> </ul> <p>TODO later: - options panel</p>"},{"location":"trace-loading.html","title":"Loading a trace","text":""},{"location":"trace-loading.html#loading-a-new-trace","title":"Loading a new trace","text":"<p>There are several ways to open a new ETW trace file (*.etl):</p> <ul> <li>Use the Open button in the Start Page displayed on startup.</li> <li>Use the Profiling -&gt; Load Profile menu.</li> <li>Use the Ctrl+O keyboard shortcut.</li> </ul> <p>Once the trace file is selected in the Open File dialog, the Load profile trace window is displayed. It lists the processes (applications) that are captured in the trace, sorted by weight (number of samples).</p> <p></p> <p>From the list, select the process you want to analyze and press the Load Profile button (alternatively, use double-click or the Return key). The selected process is loaded from the trace file, any required binary and symbol files are downloaded and the profiling data is analyzed. Once loading is completed, the window closes and the profiling views are populated, as described in Profiling UI overview.</p>"},{"location":"trace-loading.html#loading-a-previosly-opened-trace","title":"Loading a previosly opened trace","text":"<p>Previously opened traces are saved as sessions. Recent sessions can be quickly opened again for the same process using either the Start page or the session list on the left of the Load profile trace window (use double-click or the Return key).</p> <p></p>"},{"location":"trace-loading.html#symbols-configuration","title":"Symbols configuration","text":"<p>Symbols are the binary (EXE/DLL) and debug information (PDB) files required to analyze the processes recorded in a trace. The binaries are used to disassembly individual functions and the debug files are used to resolve function names and provide the source file and line number information.</p> <p></p>"},{"location":"trace-loading.html#symbol-paths","title":"Symbol paths","text":"<p>Symbols are searched in the locations indicated by the Symbol Paths list, found in the Symbols tab of the Load profile trace window. Symbol locations can be of two types:  </p> <ul> <li>Paths to local directories or network file shares.  </li> <li>Symbol server URLs. By default the Microsoft public symbol server is added to the list, with a local download cache directory at C:\\Symbols.</li> </ul> <p>More information about symbol servers and the symbol path syntax is available here: https://learn.microsoft.com/en-us/windows/win32/debug/using-symsrv</p>"},{"location":"trace-loading.html#additional-symbol-options","title":"Additional symbol options","text":"Option Description Include __NT__SYMBOL__PATH environment variable Append the environment variable's value to the list of searched symbol paths. Include subdirectories for local paths Consider symbols in sub-directories up to 3 levels deep for the local directories in the Symbols Paths list. Don't load symbols for very low sample modules Skip downloading and loading of symbols for modules with a low number of samples. This helps reduce download time for processes with many modules, where the majority have few relevant samples. A module is skipped if it has fewer samples than a threshold. This threshold can be configured using the Minimum samples field as a percentage of the total number of samples. Don't load symbols that failed in previous sessions Skip downloading and loading of symbols that could not be found in previous sessions (for example, due to offline symbol servers). The list of skipped symbols can be viewed and cleared. Cache processed symbol files Cache the processed debug symbol files and use them to speed up loading of traces requiring the same symbols. The cache files are saved in the temporary directory and can be viewed and cleared."},{"location":"trace-loading.html#trace-processing-options","title":"Trace processing options","text":"Option Description Handle Kernel profile samples Include samples executing in the kernel context and connect the call stacks between kernel and user mode code. Handle CPU performance counter samples Process CPU performance counter (PMC) events and display them in the Summary, Assembly and Source File views using additional columns. Download source files from Source Server Automatically attempt to download source files from the location indicated by the debug info file. If the download URL requires authentication, it can be configured in the Authentication section found below."},{"location":"trace-loading.html#authentication","title":"Authentication","text":"<p>Authentication using an user/email address and Personal Autehnticaion token (PAT) can be configured for both source file servers and symbol servers.</p>"},{"location":"trace-loading.html#binary-files","title":"Binary files","text":"<p>Additional local directory paths for searching binary files can be configured. The binary files to process in a trace can be restricted to only the ones in the accepted list.</p>"}]}